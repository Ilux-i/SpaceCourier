#include "Level.h"
#include <iostream>
#include <algorithm>

Level::Level() {
    // –í SFML 3.0.2 FloatRect —Å–æ–∑–¥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ position –∏ size
    levelBounds = sf::FloatRect(sf::Vector2f(0.f, 0.f), sf::Vector2f(1200.f, 800.f));
    createFirstLocation();
}

void Level::update(float deltaTime) {
    player.update(deltaTime);
    handleCollisions();
}

void Level::draw(sf::RenderWindow& window) const {
    for (const auto& platform : platforms) {
        platform->draw(window);
    }
    player.draw(window);
}

void Level::handleCollisions() {
    player.setOnGround(false);
    
    // –ö–æ–ª–ª–∏–∑–∏–∏ —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏
    for (const auto& platform : platforms) {
        if (player.getBounds().findIntersection(platform->getBounds()).has_value()) {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ—Ä–æ–Ω—É —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è
            sf::FloatRect playerBounds = player.getBounds();
            sf::FloatRect platformBounds = platform->getBounds();
            
            // –í SFML 3.0.2 position –∏ size - —ç—Ç–æ –ø–æ–ª—è
            sf::Vector2f playerPos = playerBounds.position;
            sf::Vector2f playerSize = playerBounds.size;
            float playerLeft = playerPos.x;
            float playerRight = playerPos.x + playerSize.x;
            float playerTop = playerPos.y;
            float playerBottom = playerPos.y + playerSize.y;
            
            sf::Vector2f platformPos = platformBounds.position;
            sf::Vector2f platformSize = platformBounds.size;
            float platformLeft = platformPos.x;
            float platformRight = platformPos.x + platformSize.x;
            float platformTop = platformPos.y;
            float platformBottom = platformPos.y + platformSize.y;
            
            // –í—ã—á–∏—Å–ª—è–µ–º –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è
            float overlapLeft = playerRight - platformLeft;
            float overlapRight = platformRight - playerLeft;
            float overlapTop = playerBottom - platformTop;
            float overlapBottom = platformBottom - playerTop;
            
            // –ù–∞—Ö–æ–¥–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ
            float minOverlap = std::min({overlapLeft, overlapRight, overlapTop, overlapBottom});
            
            if (minOverlap == overlapTop) {
                // –°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ —Å–≤–µ—Ä—Ö—É (–∏–≥—Ä–æ–∫ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ)
                player.setPosition(sf::Vector2f(player.getPosition().x, platformTop - playerSize.y));
                player.setOnGround(true);
                player.setVelocity(sf::Vector2f(player.getVelocity().x, 0.f));
            }
            else if (minOverlap == overlapBottom) {
                // –°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ —Å–Ω–∏–∑—É
                player.setPosition(sf::Vector2f(player.getPosition().x, platformBottom));
                player.setVelocity(sf::Vector2f(player.getVelocity().x, 0.f));
            }
            else if (minOverlap == overlapLeft) {
                // –°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ —Å–ª–µ–≤–∞
                player.setPosition(sf::Vector2f(platformLeft - playerSize.x, player.getPosition().y));
            }
            else if (minOverlap == overlapRight) {
                // –°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞
                player.setPosition(sf::Vector2f(platformRight, player.getPosition().y));
            }
        }
    }
    
    // –ì—Ä–∞–Ω–∏—Ü—ã —É—Ä–æ–≤–Ω—è
    sf::Vector2f playerPos = player.getPosition();
    sf::FloatRect playerBounds = player.getBounds();
    sf::Vector2f playerSize = playerBounds.size;
    
    sf::Vector2f levelPos = levelBounds.position;
    sf::Vector2f levelSize = levelBounds.size;
    
    // –õ–µ–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞
    if (playerPos.x < levelPos.x) {
        player.setPosition(sf::Vector2f(levelPos.x, playerPos.y));
    }
    // –ü—Ä–∞–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞
    if (playerPos.x + playerSize.x > levelPos.x + levelSize.x) {
        player.setPosition(sf::Vector2f(levelPos.x + levelSize.x - playerSize.x, playerPos.y));
    }
    // –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
    if (playerPos.y < levelPos.y) {
        player.setPosition(sf::Vector2f(playerPos.x, levelPos.y));
        player.setVelocity(sf::Vector2f(player.getVelocity().x, 0.f));
    }
    // –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ (—Å–º–µ—Ä—Ç—å –æ—Ç –ø–∞–¥–µ–Ω–∏—è)
    if (playerPos.y > levelPos.y + levelSize.y) {
        std::cout << "üíÄ –ò–≥—Ä–æ–∫ —É–ø–∞–ª –≤ –ø—Ä–æ–ø–∞—Å—Ç—å! –†–µ—Å–ø–∞–≤–Ω..." << std::endl;
        player.setPosition(sf::Vector2f(100.f, 100.f));
        player.setVelocity(sf::Vector2f(0.f, 0.f));
    }
}

void Level::createFirstLocation() {
    std::cout << "üó∫Ô∏è –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—É—é –ª–æ–∫–∞—Ü–∏—é..." << std::endl;
    
    // –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã
    platforms.push_back(std::make_unique<Platform>(
        sf::Vector2f(1000.f, 20.f), 
        sf::Vector2f(100.f, 700.f),
        sf::Color(100, 200, 100, 255)
    ));
    
    platforms.push_back(std::make_unique<Platform>(
        sf::Vector2f(200.f, 20.f),
        sf::Vector2f(100.f, 500.f),
        sf::Color(150, 150, 250, 255)
    ));
    
    platforms.push_back(std::make_unique<Platform>(
        sf::Vector2f(150.f, 20.f),
        sf::Vector2f(400.f, 400.f),
        sf::Color(250, 200, 100, 255)
    ));
    
    platforms.push_back(std::make_unique<Platform>(
        sf::Vector2f(200.f, 20.f),
        sf::Vector2f(700.f, 300.f),
        sf::Color(200, 100, 200, 255)
    ));
    
    platforms.push_back(std::make_unique<Platform>(
        sf::Vector2f(20.f, 200.f),
        sf::Vector2f(900.f, 500.f),
        sf::Color(100, 100, 150, 255)
    ));
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä–æ–∫–∞ –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
    player.setPosition(sf::Vector2f(150.f, 450.f));
}

Player& Level::getPlayer() {
    return player;
}