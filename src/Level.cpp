#include "Level.h"
#include <iostream>
#include <algorithm>
#include <cmath>

Level::Level() {
    levelBounds = sf::FloatRect(sf::Vector2f(0.f, 0.f), sf::Vector2f(1200.f, 800.f));
    createFirstLocation();
}

void Level::update(float deltaTime) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∂–∏–≤ –ª–∏ –∏–≥—Ä–æ–∫ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
    if (player.getHealthSystem().isAlive()) {
        player.update(deltaTime);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–∞–≥–æ–≤
        for (auto& enemy : enemies) {
            enemy->update(deltaTime);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ—á–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
        for (auto& deliveryPoint : deliveryPoints) {
            deliveryPoint->update(deltaTime);
        }
        
        handleCollisions();
        // –£–ë–†–ê–õ–ò –í–´–ó–û–í–´ handlePackageInteractions –∏ handleDeliveryInteractions
        // –¢–µ–ø–µ—Ä—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –¢–û–õ–¨–ö–û —á–µ—Ä–µ–∑ handleEInteraction() –ø–æ –Ω–∞–∂–∞—Ç–∏—é E
    } else {
        // –ò–≥—Ä–æ–∫ –º–µ—Ä—Ç–≤ - —Ä–µ—Å–ø–∞–≤–Ω–∏–º —É—Ä–æ–≤–µ–Ω—å
        std::cout << "üíÄ –ò–≥—Ä–æ–∫ —É–º–µ—Ä! –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ—Å–ø–∞–≤–Ω —É—Ä–æ–≤–Ω—è..." << std::endl;
        respawnLevel();
    }
}

void Level::draw(sf::RenderWindow& window) const {
    // –†–∏—Å—É–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    for (const auto& platform : platforms) {
        platform->draw(window);
    }
    
    // –†–∏—Å—É–µ–º —Ç–æ—á–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
    for (const auto& deliveryPoint : deliveryPoints) {
        deliveryPoint->draw(window);
    }
    
    // –†–∏—Å—É–µ–º –ø–æ—Å—ã–ª–∫–∏
    for (const auto& package : packages) {
        package->draw(window);
    }
    
    // –†–∏—Å—É–µ–º –≤—Ä–∞–≥–æ–≤
    for (const auto& enemy : enemies) {
        enemy->draw(window);
    }
    
    // –†–∏—Å—É–µ–º –∏–≥—Ä–æ–∫–∞
    player.draw(window);
}

void Level::handleCollisions() {
    player.setOnGround(false);
    
    // –ö–æ–ª–ª–∏–∑–∏–∏ —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏
    for (const auto& platform : platforms) {
        if (player.getBounds().findIntersection(platform->getBounds()).has_value()) {
            handlePlayerPlatformCollision(*platform);
        }
    }
    
    handlePlayerEnemyCollisions();
    
    // –ì—Ä–∞–Ω–∏—Ü—ã —É—Ä–æ–≤–Ω—è
    sf::Vector2f playerPos = player.getPosition();
    sf::FloatRect playerBounds = player.getBounds();
    
    sf::Vector2f levelPos = levelBounds.position;
    sf::Vector2f levelSize = levelBounds.size;
    
    // –õ–µ–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞
    if (playerPos.x < levelPos.x) {
        player.setPosition(sf::Vector2f(levelPos.x, playerPos.y));
    }
    // –ü—Ä–∞–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞
    if (playerPos.x + playerBounds.size.x > levelPos.x + levelSize.x) {
        player.setPosition(sf::Vector2f(levelPos.x + levelSize.x - playerBounds.size.x, playerPos.y));
    }
    // –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
    if (playerPos.y < levelPos.y) {
        player.setPosition(sf::Vector2f(playerPos.x, levelPos.y));
        player.setVelocity(sf::Vector2f(player.getVelocity().x, 0.f));
    }
    // –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ (—Å–º–µ—Ä—Ç—å –æ—Ç –ø–∞–¥–µ–Ω–∏—è)
    if (playerPos.y > levelPos.y + levelSize.y) {
        std::cout << "üíÄ –ò–≥—Ä–æ–∫ —É–ø–∞–ª –≤ –ø—Ä–æ–ø–∞—Å—Ç—å!" << std::endl;
        player.takeDamage();
        
        // –í–°–ï–ì–î–ê –í–´–ó–´–í–ê–ï–ú –ü–û–õ–ù–´–ô –†–ï–°–ü–ê–í–ù –£–†–û–í–ù–Ø –ü–†–ò –ü–ê–î–ï–ù–ò–ò –í –ü–†–û–ü–ê–°–¢–¨
        std::cout << "üîÑ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ä–µ—Å–ø–∞–≤–Ω–∞ —É—Ä–æ–≤–Ω—è..." << std::endl;
        respawnLevel();
    }
}

// –ú–ï–¢–û–î –î–õ–Ø –ö–û–õ–õ–ò–ó–ò–ô –° –ü–õ–ê–¢–§–û–†–ú–ê–ú–ò
void Level::handlePlayerPlatformCollision(const Platform& platform) {
    sf::FloatRect playerBounds = player.getBounds();
    sf::FloatRect platformBounds = platform.getBounds();
    
    auto intersection = playerBounds.findIntersection(platformBounds);
    if (!intersection.has_value()) return;
    
    sf::FloatRect overlap = intersection.value();
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–ª–∏–∑–∏–∏
    if (overlap.size.x < overlap.size.y) {
        // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –∫–æ–ª–ª–∏–∑–∏—è
        if (playerBounds.position.x < platformBounds.position.x) {
            // –ò–≥—Ä–æ–∫ —Å–ª–µ–≤–∞ –æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
            player.setPosition(sf::Vector2f(
                platformBounds.position.x - playerBounds.size.x,
                player.getPosition().y
            ));
        } else {
            // –ò–≥—Ä–æ–∫ —Å–ø—Ä–∞–≤–∞ –æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
            player.setPosition(sf::Vector2f(
                platformBounds.position.x + platformBounds.size.x,
                player.getPosition().y
            ));
        }
        player.setVelocity(sf::Vector2f(0.f, player.getVelocity().y));
    } else {
        // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –∫–æ–ª–ª–∏–∑–∏—è
        if (playerBounds.position.y < platformBounds.position.y) {
            // –ò–≥—Ä–æ–∫ –Ω–∞–¥ –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π (–ø—Ä–∏–∑–µ–º–ª–µ–Ω–∏–µ)
            player.setPosition(sf::Vector2f(
                player.getPosition().x,
                platformBounds.position.y - playerBounds.size.y
            ));
            player.setVelocity(sf::Vector2f(player.getVelocity().x, 0.f));
            player.setOnGround(true);
        } else {
            // –ò–≥—Ä–æ–∫ –ø–æ–¥ –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π (—É–¥–∞—Ä –≥–æ–ª–æ–≤–æ–π)
            player.setPosition(sf::Vector2f(
                player.getPosition().x,
                platformBounds.position.y + platformBounds.size.y
            ));
            player.setVelocity(sf::Vector2f(player.getVelocity().x, 0.f));
        }
    }
}

// –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –ú–ï–¢–û–î –î–õ–Ø –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–Ø –° E
void Level::handleEInteraction() {
    Player& player = getPlayer();
    
    std::cout << "üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ E-–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è..." << std::endl;
    
    // –°–ù–ê–ß–ê–õ–ê –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞–≤–∫—É (–µ—Å–ª–∏ –Ω–µ—Å–µ–º –ø–æ—Å—ã–ª–∫—É)
    if (player.isCarryingPackage()) {
        std::cout << "   –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏..." << std::endl;
        for (auto& deliveryPoint : deliveryPoints) {
            if (deliveryPoint->isActive() && 
                player.getBounds().findIntersection(deliveryPoint->getBounds()).has_value()) {
                
                player.deliverPackage();
                std::cout << "üéâ –ü–æ—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞!" << std::endl;
                return;
            }
        }
        std::cout << "‚ùå –ù–µ—Ç —Ç–æ—á–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ —Ä—è–¥–æ–º!" << std::endl;
    } 
    // –ó–ê–¢–ï–ú –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–±–æ—Ä (–µ—Å–ª–∏ –Ω–µ –Ω–µ—Å–µ–º –ø–æ—Å—ã–ª–∫—É)
    else {
        std::cout << "   –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–±–æ—Ä–∞ –ø–æ—Å—ã–ª–∫–∏..." << std::endl;
        for (auto& package : packages) {
            if (!package->isDelivered() && !package->isCarried() && 
                player.getBounds().findIntersection(package->getBounds()).has_value()) {
                
                player.pickUpPackage(package.get());
                std::cout << "üì¶ –ü–æ—Å—ã–ª–∫–∞ –ø–æ–¥–Ω—è—Ç–∞!" << std::endl;
                return;
            }
        }
        std::cout << "‚ùå –ù–µ—Ç –ø–æ—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ —Ä—è–¥–æ–º!" << std::endl;
    }
}

void Level::handlePlayerEnemyCollisions() {
    for (auto& enemy : enemies) {
        if (enemy->isActive() && player.getBounds().findIntersection(enemy->getBounds()).has_value()) {
            enemy->onCollisionWithPlayer();
            player.takeDamage();
            
            // –û—Ç–±—Ä–∞—Å—ã–≤–∞–Ω–∏–µ
            sf::Vector2f knockback = player.getPosition() - enemy->getPosition();
            float length = std::sqrt(knockback.x * knockback.x + knockback.y * knockback.y);
            if (length > 0) {
                knockback.x /= length;
                knockback.y /= length;
            }
            player.setVelocity(knockback * 600.f + sf::Vector2f(0.f, -300.f));
            
            std::cout << "üí• –°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ —Å –¥—Ä–æ–Ω–æ–º! –ó–¥–æ—Ä–æ–≤—å–µ: " 
                      << player.getHealthSystem().getHealth() << "/3" << std::endl;
            
            if (!player.getHealthSystem().isAlive()) {
                std::cout << "üíÄ –ò–≥—Ä–æ–∫ —É–º–µ—Ä –æ—Ç –¥—Ä–æ–Ω–∞!" << std::endl;
            }
        }
    }
}

void Level::respawnLevel() {
    std::cout << "üîÑ –†–µ—Å–ø–∞–≤–Ω —É—Ä–æ–≤–Ω—è..." << std::endl;
    
    // –°–ë–†–ê–°–´–í–ê–ï–ú –ó–î–û–†–û–í–¨–ï –ò–ì–†–û–ö–ê
    player.getHealthSystem().reset();
    
    // –†–ï–°–ü–ê–í–ù–ò–ú –ò–ì–†–û–ö–ê
    respawnPlayer();
    
    // –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –ü–û–°–´–õ–ö–ò –ù–ê –ù–ê–ß–ê–õ–¨–ù–´–ï –ü–û–ó–ò–¶–ò–ò
    for (size_t i = 0; i < packages.size() && i < packageStartPositions.size(); ++i) {
        packages[i]->setCarried(false);
        packages[i]->setDelivered(false);
        
        // –Ø–í–ù–û –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –ü–û–ó–ò–¶–ò–Æ –ò –û–ë–ù–û–í–õ–Ø–ï–ú
        sf::Vector2f startPos = packageStartPositions[i];
        packages[i]->setPosition(startPos);
        
        // –í–´–ó–´–í–ê–ï–ú update –î–õ–Ø –ü–†–ò–ú–ï–ù–ï–ù–ò–Ø –ò–ó–ú–ï–ù–ï–ù–ò–ô
        packages[i]->update(0.f);
        
        std::cout << "üì¶ –ü–æ—Å—ã–ª–∫–∞ " << i << " –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –≤ –ø–æ–∑–∏—Ü–∏—é: (" 
                  << startPos.x << ", " << startPos.y << ")" << std::endl;
    }
    
    std::cout << "‚úÖ –£—Ä–æ–≤–µ–Ω—å –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω! –ó–¥–æ—Ä–æ–≤—å–µ: " 
              << player.getHealthSystem().getHealth() << "/3" << std::endl;
}

void Level::respawnPlayer() {
    player.setPosition(sf::Vector2f(150.f, 450.f));
    player.setVelocity(sf::Vector2f(0.f, 0.f));
    player.setOnGround(false);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å—ã–ª–∫—É –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –µ—ë –Ω—ë—Å
    if (player.isCarryingPackage()) {
        std::cout << "üîÑ –°–±—Ä–∞—Å—ã–≤–∞–µ–º carried package..." << std::endl;
        player.deliverPackage();
    }
    
    std::cout << "üë§ –ò–≥—Ä–æ–∫ —Ä–µ—Å–ø–∞–≤–Ω—É—Ç –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏" << std::endl;
}

void Level::createFirstLocation() {
    std::cout << "üó∫Ô∏è –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—É—é –ª–æ–∫–∞—Ü–∏—é —Å –ø–æ—Å—ã–ª–∫–∞–º–∏..." << std::endl;
    
    platforms.clear();
    enemies.clear();
    packages.clear();
    deliveryPoints.clear();
    
    // –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã
    platforms.push_back(std::make_unique<Platform>(
        sf::Vector2f(1000.f, 20.f), 
        sf::Vector2f(100.f, 700.f),
        sf::Color(100, 200, 100, 255)
    ));
    
    platforms.push_back(std::make_unique<Platform>(
        sf::Vector2f(200.f, 20.f),
        sf::Vector2f(100.f, 500.f),
        sf::Color(150, 150, 250, 255)
    ));
    
    platforms.push_back(std::make_unique<Platform>(
        sf::Vector2f(150.f, 20.f),
        sf::Vector2f(400.f, 400.f),
        sf::Color(250, 200, 100, 255)
    ));
    
    platforms.push_back(std::make_unique<Platform>(
        sf::Vector2f(200.f, 20.f),
        sf::Vector2f(700.f, 300.f),
        sf::Color(200, 100, 200, 255)
    ));
    
    platforms.push_back(std::make_unique<Platform>(
        sf::Vector2f(20.f, 200.f),
        sf::Vector2f(900.f, 500.f),
        sf::Color(100, 100, 150, 255)
    ));
    
    // –í—Ä–∞–≥–∏
    enemies.push_back(std::make_unique<Enemy>(
        sf::Vector2f(200.f, 450.f),
        sf::Vector2f(300.f, 450.f)
    ));
    
    enemies.push_back(std::make_unique<Enemy>(
        sf::Vector2f(500.f, 350.f),
        sf::Vector2f(600.f, 350.f)
    ));
    
    packageStartPositions.clear();
    deliveryPointStartPositions.clear();
    
    // –ü–û–°–´–õ–ö–ê –ù–ê –°–ê–ú–û–ô –í–ï–†–•–ù–ï–ô –ü–õ–ê–¢–§–û–†–ú–ï
    packages.push_back(std::make_unique<Package>(
        sf::Vector2f(750.f, 250.f)
    ));
    packageStartPositions.push_back(sf::Vector2f(750.f, 250.f));
    
    // –¢–û–ß–ö–ê –î–û–°–¢–ê–í–ö–ò –ó–ê –°–¢–ï–ù–ö–û–ô
    deliveryPoints.push_back(std::make_unique<DeliveryPoint>(
        sf::Vector2f(950.f, 650.f)
    ));
    deliveryPointStartPositions.push_back(sf::Vector2f(950.f, 650.f));
    
    respawnPlayer();
    
    std::cout << "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: " << enemies.size() << " –≤—Ä–∞–≥–æ–≤, " 
              << packages.size() << " –ø–æ—Å—ã–ª–∫–∞, " 
              << deliveryPoints.size() << " —Ç–æ—á–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏" << std::endl;
}

Player& Level::getPlayer() {
    return player;
}