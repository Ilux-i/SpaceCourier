#include "Level.h"
#include <iostream>
#include <algorithm>
#include <cmath>

Level::Level() {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å –¥–≤—É–º—è –≤–µ–∫—Ç–æ—Ä–∞–º–∏
    levelBounds = sf::FloatRect(sf::Vector2f(0.f, 0.f), sf::Vector2f(1200.f, 800.f));
    createFirstLocation();
}

void Level::update(float deltaTime) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∂–∏–≤ –ª–∏ –∏–≥—Ä–æ–∫ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
    if (player.getHealthSystem().isAlive()) {
        player.update(deltaTime);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–∞–≥–æ–≤
        for (auto& enemy : enemies) {
            enemy->update(deltaTime);
        }
        
        handleCollisions();
    } else {
        // –ò–≥—Ä–æ–∫ –º–µ—Ä—Ç–≤ - —Ä–µ—Å–ø–∞–≤–Ω–∏–º —É—Ä–æ–≤–µ–Ω—å
        respawnLevel();
    }
}

void Level::draw(sf::RenderWindow& window) const {
    for (const auto& platform : platforms) {
        platform->draw(window);
    }
    
    for (const auto& enemy : enemies) {
        enemy->draw(window);
    }
    
    player.draw(window);
}

void Level::handleCollisions() {
    player.setOnGround(false);
    
    // –ö–æ–ª–ª–∏–∑–∏–∏ —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏
    for (const auto& platform : platforms) {
        if (player.getBounds().findIntersection(platform->getBounds()).has_value()) {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ—Ä–æ–Ω—É —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è
            sf::FloatRect playerBounds = player.getBounds();
            sf::FloatRect platformBounds = platform->getBounds();
            
            // –í SFML 3.0.2 position –∏ size - —ç—Ç–æ –ø–æ–ª—è
            sf::Vector2f playerPos = playerBounds.position;
            sf::Vector2f playerSize = playerBounds.size;
            float playerLeft = playerPos.x;
            float playerRight = playerPos.x + playerSize.x;
            float playerTop = playerPos.y;
            float playerBottom = playerPos.y + playerSize.y;
            
            sf::Vector2f platformPos = platformBounds.position;
            sf::Vector2f platformSize = platformBounds.size;
            float platformLeft = platformPos.x;
            float platformRight = platformPos.x + platformSize.x;
            float platformTop = platformPos.y;
            float platformBottom = platformPos.y + platformSize.y;
            
            // –í—ã—á–∏—Å–ª—è–µ–º –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è
            float overlapLeft = playerRight - platformLeft;
            float overlapRight = platformRight - playerLeft;
            float overlapTop = playerBottom - platformTop;
            float overlapBottom = platformBottom - playerTop;
            
            // –ù–∞—Ö–æ–¥–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ
            float minOverlap = std::min({overlapLeft, overlapRight, overlapTop, overlapBottom});
            
            if (minOverlap == overlapTop) {
                // –°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ —Å–≤–µ—Ä—Ö—É (–∏–≥—Ä–æ–∫ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ)
                player.setPosition(sf::Vector2f(player.getPosition().x, platformTop - playerSize.y));
                player.setOnGround(true);
                player.setVelocity(sf::Vector2f(player.getVelocity().x, 0.f));
            }
            else if (minOverlap == overlapBottom) {
                // –°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ —Å–Ω–∏–∑—É
                player.setPosition(sf::Vector2f(player.getPosition().x, platformBottom));
                player.setVelocity(sf::Vector2f(player.getVelocity().x, 0.f));
            }
            else if (minOverlap == overlapLeft) {
                // –°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ —Å–ª–µ–≤–∞
                player.setPosition(sf::Vector2f(platformLeft - playerSize.x, player.getPosition().y));
            }
            else if (minOverlap == overlapRight) {
                // –°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞
                player.setPosition(sf::Vector2f(platformRight, player.getPosition().y));
            }
        }
    }
    
    // –ö–æ–ª–ª–∏–∑–∏–∏ —Å –≤—Ä–∞–≥–∞–º–∏
    handlePlayerEnemyCollisions();
    
    // –ì—Ä–∞–Ω–∏—Ü—ã —É—Ä–æ–≤–Ω—è
    sf::Vector2f playerPos = player.getPosition();
    sf::FloatRect playerBounds = player.getBounds();
    sf::Vector2f playerSize = playerBounds.size;
    
    sf::Vector2f levelPos = levelBounds.position;
    sf::Vector2f levelSize = levelBounds.size;
    
    // –õ–µ–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞
    if (playerPos.x < levelPos.x) {
        player.setPosition(sf::Vector2f(levelPos.x, playerPos.y));
    }
    // –ü—Ä–∞–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞
    if (playerPos.x + playerSize.x > levelPos.x + levelSize.x) {
        player.setPosition(sf::Vector2f(levelPos.x + levelSize.x - playerSize.x, playerPos.y));
    }
    // –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
    if (playerPos.y < levelPos.y) {
        player.setPosition(sf::Vector2f(playerPos.x, levelPos.y));
        player.setVelocity(sf::Vector2f(player.getVelocity().x, 0.f));
    }
    // –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ (—Å–º–µ—Ä—Ç—å –æ—Ç –ø–∞–¥–µ–Ω–∏—è)
    if (playerPos.y > levelPos.y + levelSize.y) {
        std::cout << "üíÄ –ò–≥—Ä–æ–∫ —É–ø–∞–ª –≤ –ø—Ä–æ–ø–∞—Å—Ç—å!" << std::endl;
        player.takeDamage();
        
        if (player.getHealthSystem().isAlive()) {
            // –†–µ—Å–ø–∞–≤–Ω –∏–≥—Ä–æ–∫–∞ –µ—Å–ª–∏ –µ—â–µ –µ—Å—Ç—å –∂–∏–∑–Ω–∏
            respawnPlayer();
        }
    }
}

void Level::handlePlayerEnemyCollisions() {
    for (auto& enemy : enemies) {
        if (enemy->isActive() && player.getBounds().findIntersection(enemy->getBounds()).has_value()) {
            enemy->onCollisionWithPlayer();
            player.takeDamage();  // –£—Ä–æ–Ω –∏–≥—Ä–æ–∫—É
            
            // –û—Ç–±—Ä–∞—Å—ã–≤–∞–Ω–∏–µ
            sf::Vector2f knockback = player.getPosition() - enemy->getPosition();
            float length = std::sqrt(knockback.x * knockback.x + knockback.y * knockback.y);
            if (length > 0) {
                knockback.x /= length;
                knockback.y /= length;
            }
            player.setVelocity(knockback * 600.f + sf::Vector2f(0.f, -300.f));
            
            std::cout << "üí• –°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ —Å –¥—Ä–æ–Ω–æ–º! –ó–¥–æ—Ä–æ–≤—å–µ: " 
                      << player.getHealthSystem().getHealth() << "/3" << std::endl;
            
            // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ —É–º–µ—Ä - —Ä–µ—Å–ø–∞–≤–Ω
            if (!player.getHealthSystem().isAlive()) {
                std::cout << "üíÄ –ò–≥—Ä–æ–∫ —É–º–µ—Ä –æ—Ç –¥—Ä–æ–Ω–∞!" << std::endl;
            }
        }
    }
}

// –ú–ï–¢–û–î: –†–µ—Å–ø–∞–≤–Ω –≤—Å–µ–≥–æ —É—Ä–æ–≤–Ω—è
void Level::respawnLevel() {
    std::cout << "üîÑ –†–µ—Å–ø–∞–≤–Ω —É—Ä–æ–≤–Ω—è..." << std::endl;
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –∏–≥—Ä–æ–∫–∞
    player.getHealthSystem().reset();
    
    // –†–µ—Å–ø–∞–≤–Ω–∏–º –∏–≥—Ä–æ–∫–∞
    respawnPlayer();
    
    // –†–µ—Å–ø–∞–≤–Ω–∏–º –≤—Å–µ—Ö –≤—Ä–∞–≥–æ–≤ (—Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
    for (auto& enemy : enemies) {
        // –î–ª—è —Ä–µ—Å–ø–∞–≤–Ω–∞ –≤—Ä–∞–≥–æ–≤ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ –≤ –∫–ª–∞—Å—Å Enemy
        // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
    }
    
    std::cout << "‚úÖ –£—Ä–æ–≤–µ–Ω—å –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω! –ó–¥–æ—Ä–æ–≤—å–µ: " 
              << player.getHealthSystem().getHealth() << "/3" << std::endl;
}

// –ú–ï–¢–û–î: –†–µ—Å–ø–∞–≤–Ω –∏–≥—Ä–æ–∫–∞
void Level::respawnPlayer() {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä–æ–∫–∞ –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
    player.setPosition(sf::Vector2f(150.f, 450.f));
    player.setVelocity(sf::Vector2f(0.f, 0.f));
    player.setOnGround(false);
    
    // –í–ê–ñ–ù–û: –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –∏–≥—Ä–æ–∫–∞
    player.getHealthSystem().reset();
    
    std::cout << "üë§ –ò–≥—Ä–æ–∫ —Ä–µ—Å–ø–∞–≤–Ω—É—Ç –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏. –ó–¥–æ—Ä–æ–≤—å–µ: " 
              << player.getHealthSystem().getHealth() << "/3" << std::endl;
}

void Level::createFirstLocation() {
    std::cout << "üó∫Ô∏è –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—É—é –ª–æ–∫–∞—Ü–∏—é —Å –≤—Ä–∞–≥–∞–º–∏-–¥—Ä–æ–Ω–∞–º–∏..." << std::endl;
    
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ–±—ä–µ–∫—Ç—ã (–µ—Å–ª–∏ –±—ã–ª–∏)
    platforms.clear();
    enemies.clear();
    
    // –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã
    platforms.push_back(std::make_unique<Platform>(
        sf::Vector2f(1000.f, 20.f), 
        sf::Vector2f(100.f, 700.f),
        sf::Color(100, 200, 100, 255)
    ));
    
    platforms.push_back(std::make_unique<Platform>(
        sf::Vector2f(200.f, 20.f),
        sf::Vector2f(100.f, 500.f),
        sf::Color(150, 150, 250, 255)
    ));
    
    platforms.push_back(std::make_unique<Platform>(
        sf::Vector2f(150.f, 20.f),
        sf::Vector2f(400.f, 400.f),
        sf::Color(250, 200, 100, 255)
    ));
    
    platforms.push_back(std::make_unique<Platform>(
        sf::Vector2f(200.f, 20.f),
        sf::Vector2f(700.f, 300.f),
        sf::Color(200, 100, 200, 255)
    ));
    
    platforms.push_back(std::make_unique<Platform>(
        sf::Vector2f(20.f, 200.f),
        sf::Vector2f(900.f, 500.f),
        sf::Color(100, 100, 150, 255)
    ));
    
    // –í—Ä–∞–≥–∏-–¥—Ä–æ–Ω—ã
    enemies.push_back(std::make_unique<Enemy>(
        sf::Vector2f(200.f, 450.f),
        sf::Vector2f(300.f, 450.f)
    ));
    
    enemies.push_back(std::make_unique<Enemy>(
        sf::Vector2f(500.f, 350.f),
        sf::Vector2f(600.f, 350.f)
    ));
    
    enemies.push_back(std::make_unique<Enemy>(
        sf::Vector2f(800.f, 250.f),
        sf::Vector2f(800.f, 350.f)
    ));
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä–æ–∫–∞ –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
    respawnPlayer();
    
    std::cout << "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤—Ä–∞–≥–æ–≤-–¥—Ä–æ–Ω–æ–≤: " << enemies.size() << std::endl;
}

Player& Level::getPlayer() {
    return player;
}