#include "Game.h"
#include <iostream>

Game::Game() 
    : window(sf::VideoMode({1200, 800}), sf::String("Space Courier"))
    , currentState(GameState::MAIN_MENU)
    , previousState(GameState::MAIN_MENU)
{
    window.setFramerateLimit(60);
    setupMenus();
}

void Game::run() {
    std::cout << "üöÄ –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã Space Courier!" << std::endl;
    
    sf::Clock clock;
    while (window.isOpen() && currentState != GameState::EXIT) {
        float deltaTime = clock.restart().asSeconds();
        
        processEvents();
        update(deltaTime);
        render();
    }
    
    std::cout << "üëã –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!" << std::endl;
}

void Game::processEvents() {
    while (const std::optional event = window.pollEvent()) {
        if (event->is<sf::Event::Closed>()) {
            window.close();
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
        switch (currentState) {
            case GameState::MAIN_MENU:
                mainMenu.handleEvent(*event, window);
                break;
            case GameState::PAUSED:
                pauseMenu.handleEvent(*event, window);
                break;
            case GameState::PLAYING:
                // –ü–ï–†–ï–î–ê–ï–ú –°–û–ë–´–¢–ò–Ø –í InputHandler –î–õ–Ø –ò–ì–†–û–í–û–ì–û –ü–†–û–¶–ï–°–°–ê
                handleGameEvents(*event);
                break;
            case GameState::LEVEL_SELECT:
            case GameState::OPTIONS:
                // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ
                break;
            case GameState::EXIT:
                window.close();
                break;
        }
    }
}

void Game::update(float deltaTime) {
    switch (currentState) {
        case GameState::MAIN_MENU:
            mainMenu.update(deltaTime);
            break;
        case GameState::PAUSED:
            pauseMenu.update(deltaTime);
            break;
        case GameState::PLAYING:
            // –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú –ù–ï–ü–†–ï–†–´–í–ù–´–ô –í–í–û–î –î–õ–Ø –î–í–ò–ñ–ï–ù–ò–Ø
            handleContinuousInput();
            currentLevel.update(deltaTime);
            break;
        case GameState::LEVEL_SELECT:
        case GameState::OPTIONS:
        case GameState::EXIT:
            // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ
            break;
    }
}

void Game::render() {
    window.clear(sf::Color(30, 30, 60, 255));
    
    switch (currentState) {
        case GameState::MAIN_MENU:
            mainMenu.draw(window);
            break;
        case GameState::PAUSED:
            currentLevel.draw(window); // –§–æ–Ω - —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å
            pauseMenu.draw(window);    // –ü–æ–≤–µ—Ä—Ö - –º–µ–Ω—é –ø–∞—É–∑—ã
            break;
        case GameState::PLAYING:
            currentLevel.draw(window);
            break;
        case GameState::LEVEL_SELECT:
        case GameState::OPTIONS:
        case GameState::EXIT:
            // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ
            break;
    }
    
    window.display();
}

void Game::changeState(GameState newState) {
    previousState = currentState;
    currentState = newState;
    std::cout << "üîÑ –°–º–µ–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è: " << static_cast<int>(previousState) 
              << " -> " << static_cast<int>(currentState) << std::endl;
}

void Game::setupMenus() {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    mainMenu.setTitle("SPACE COURIER");
    mainMenu.clearButtons();
    mainMenu.addButton("START GAME", [this]() {
        std::cout << "üéÆ –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã!" << std::endl;
        changeState(GameState::PLAYING);
    }, sf::Vector2f(450, 300));
    
    mainMenu.addButton("LEVEL SELECT", [this]() {
        std::cout << "üóÇÔ∏è –í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è" << std::endl;
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ
    }, sf::Vector2f(450, 380));
    
    mainMenu.addButton("OPTIONS", [this]() {
        std::cout << "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏" << std::endl;
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ
    }, sf::Vector2f(450, 460));
    
    mainMenu.addButton("EXIT GAME", [this]() {
        std::cout << "üö™ –í—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä—ã" << std::endl;
        changeState(GameState::EXIT);
    }, sf::Vector2f(450, 540));
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω—é –ø–∞—É–∑—ã
    pauseMenu.setTitle("GAME PAUSED");
    pauseMenu.clearButtons();
    pauseMenu.addButton("RESUME GAME", [this]() {
        std::cout << "‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É" << std::endl;
        changeState(GameState::PLAYING);
    }, sf::Vector2f(450, 300));
    
    pauseMenu.addButton("RESTART LEVEL", [this]() {
        std::cout << "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —É—Ä–æ–≤–Ω—è" << std::endl;
        currentLevel = Level();
        changeState(GameState::PLAYING);
    }, sf::Vector2f(450, 380));
    
    pauseMenu.addButton("MAIN MENU", [this]() {
        std::cout << "üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" << std::endl;
        changeState(GameState::MAIN_MENU);
    }, sf::Vector2f(450, 460));
    
    pauseMenu.addButton("EXIT GAME", [this]() {
        std::cout << "üö™ –í—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä—ã" << std::endl;
        changeState(GameState::EXIT);
    }, sf::Vector2f(450, 540));
}

void Game::handleGameEvents(const sf::Event& event) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à–∏ E –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ—Å—ã–ª–∫–∞–º–∏
    if (const auto* keyEvent = event.getIf<sf::Event::KeyPressed>()) {
        if (keyEvent->scancode == sf::Keyboard::Scancode::E) {
            std::cout << "üéÆ –ù–∞–∂–∞—Ç–∞ E –≤ –∏–≥—Ä–æ–≤–æ–º —Ä–µ–∂–∏–º–µ" << std::endl;
            currentLevel.handleEInteraction();
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ Escape –¥–ª—è –ø–∞—É–∑—ã
        if (keyEvent->scancode == sf::Keyboard::Scancode::Escape) {
            changeState(GameState::PAUSED);
        }
    }
}

void Game::handleContinuousInput() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∞–≤–∏—à –¥–≤–∏–∂–µ–Ω–∏—è
    bool moveLeft = sf::Keyboard::isKeyPressed(sf::Keyboard::Scancode::A) || 
                    sf::Keyboard::isKeyPressed(sf::Keyboard::Scancode::Left);
    
    bool moveRight = sf::Keyboard::isKeyPressed(sf::Keyboard::Scancode::D) || 
                     sf::Keyboard::isKeyPressed(sf::Keyboard::Scancode::Right);
    
    bool moveUp = sf::Keyboard::isKeyPressed(sf::Keyboard::Scancode::W) || 
                  sf::Keyboard::isKeyPressed(sf::Keyboard::Scancode::Up);
    
    bool moveDown = sf::Keyboard::isKeyPressed(sf::Keyboard::Scancode::S) || 
                    sf::Keyboard::isKeyPressed(sf::Keyboard::Scancode::Down);
    
    // –°–æ–∑–¥–∞–µ–º –≤–µ–∫—Ç–æ—Ä –¥–≤–∏–∂–µ–Ω–∏—è
    sf::Vector2f movement(0.f, 0.f);
    
    if (moveLeft) movement.x -= 1.f;
    if (moveRight) movement.x += 1.f;
    if (moveUp) movement.y -= 1.f;
    if (moveDown) movement.y += 1.f;
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ–∫—Ç–æ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏–µ
    if (movement.x != 0.f || movement.y != 0.f) {
        float length = std::sqrt(movement.x * movement.x + movement.y * movement.y);
        movement.x /= length;
        movement.y /= length;
    }
    
    // –ü–µ—Ä–µ–¥–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É
    currentLevel.getPlayer().move(movement);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä—ã–∂–∫–∞
    if (sf::Keyboard::isKeyPressed(sf::Keyboard::Scancode::Space)) {
        currentLevel.getPlayer().jump();
    }
}