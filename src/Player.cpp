#include "Player.h"
#include <iostream>

Player::Player() : onGround(false), jumpForce(500.f), moveSpeed(300.f), gravity(800.f), carriedPackage(nullptr) {
    shape.setRadius(25.f);
    shape.setFillColor(sf::Color(220, 50, 50, 255));
    shape.setPosition(position);
    baseMoveSpeed = moveSpeed; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑–æ–≤—É—é —Å–∫–æ—Ä–æ—Å—Ç—å
}

void Player::update(float deltaTime) {
    healthSystem.update(deltaTime);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ—Å—ã–ª–∫–∏ –µ—Å–ª–∏ –Ω–µ—Å—ë–º –µ—ë
    if (carriedPackage && !carriedPackage->isDelivered()) {
        // –ü–æ–∑–∏—Ü–∏—è –ø–æ—Å—ã–ª–∫–∏ –Ω–∞–¥ –≥–æ–ª–æ–≤–æ–π –∏–≥—Ä–æ–∫–∞
        carriedPackage->setPosition(sf::Vector2f(
            position.x - 5.f, 
            position.y - 40.f
        ));
        carriedPackage->update(deltaTime);
    }
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—é
    if (!onGround) {
        velocity.y += gravity * deltaTime;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
    position += velocity * deltaTime;
    shape.setPosition(position);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    velocity.x = 0;
}

void Player::draw(sf::RenderWindow& window) const {
    window.draw(shape);
    
    // –†–∏—Å—É–µ–º –ø–æ—Å—ã–ª–∫—É –µ—Å–ª–∏ –Ω–µ—Å—ë–º –µ—ë
    if (carriedPackage && !carriedPackage->isDelivered()) {
        carriedPackage->draw(window);
    }
    
    healthSystem.draw(window);  // –†–∏—Å—É–µ–º –∑–¥–æ—Ä–æ–≤—å–µ
}

sf::FloatRect Player::getBounds() const {
    return shape.getGlobalBounds();
}

void Player::jump() {
    if (onGround && healthSystem.isAlive()) {
        velocity.y = -jumpForce;
        onGround = false;
        std::cout << "üîº –ò–≥—Ä–æ–∫ –ø—Ä—ã–≥–Ω—É–ª!" << std::endl;
    }
}

void Player::move(const sf::Vector2f& direction) {
    if (healthSystem.isAlive()) {
        velocity.x = direction.x * moveSpeed;
    }
}

void Player::applyGravity(float deltaTime) {
    if (!onGround) {
        velocity.y += gravity * deltaTime;
    }
}

bool Player::isOnGround() const {
    return onGround;
}

void Player::setOnGround(bool grounded) {
    onGround = grounded;
}

HealthSystem& Player::getHealthSystem() {
    return healthSystem;
}

void Player::takeDamage() {
    healthSystem.takeDamage();
}

// –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ü–û–°–´–õ–ö–ê–ú–ò

bool Player::isCarryingPackage() const {
    return carriedPackage != nullptr && !carriedPackage->isDelivered();
}

void Player::pickUpPackage(Package* package) {
    if (!isCarryingPackage() && package && !package->isDelivered()) {
        carriedPackage = package;
        carriedPackage->setCarried(true);
        
        // –ó–∞–º–µ–¥–ª–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –Ω–∞ 20% –ø—Ä–∏ –Ω–æ—à–µ–Ω–∏–∏ –ø–æ—Å—ã–ª–∫–∏
        moveSpeed = baseMoveSpeed * 0.8f;
        
        std::cout << "üì¶ –ò–≥—Ä–æ–∫ –ø–æ–¥–Ω—è–ª –ø–æ—Å—ã–ª–∫—É! –°–∫–æ—Ä–æ—Å—Ç—å —É–º–µ–Ω—å—à–µ–Ω–∞ –Ω–∞ 20%" << std::endl;
        std::cout << "   –ù–æ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: " << moveSpeed << " (–±–∞–∑–æ–≤–∞—è: " << baseMoveSpeed << ")" << std::endl;
    } else {
        std::cout << "‚ùå –ù–µ –º–æ–≥—É –ø–æ–¥–Ω—è—Ç—å –ø–æ—Å—ã–ª–∫—É: ";
        if (isCarryingPackage()) std::cout << "—É–∂–µ –Ω–µ—Å—É –ø–æ—Å—ã–ª–∫—É";
        else if (!package) std::cout << "–ø–æ—Å—ã–ª–∫–∞ nullptr";
        else if (package->isDelivered()) std::cout << "–ø–æ—Å—ã–ª–∫–∞ —É–∂–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞";
        std::cout << std::endl;
    }
}

void Player::deliverPackage() {
    if (carriedPackage) {
        carriedPackage->setDelivered(true);
        carriedPackage->setCarried(false);
        carriedPackage = nullptr;
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å
        moveSpeed = baseMoveSpeed;
        
        std::cout << "‚úÖ –ü–æ—Å—ã–ª–∫–∞ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞! –°–∫–æ—Ä–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: " << moveSpeed << std::endl;
    } else {
        std::cout << "‚ùå –ù–µ –º–æ–≥—É –¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ—Å—ã–ª–∫—É: –Ω–µ –Ω–µ—Å—É –ø–æ—Å—ã–ª–∫—É" << std::endl;
    }
}

Package* Player::getCarriedPackage() {
    return carriedPackage;
}

float Player::getMoveSpeed() const {
    return moveSpeed;
}