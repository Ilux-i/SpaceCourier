#include "InputHandler.h"
#include <iostream>
#include <cmath>

InputHandler::InputHandler() {
    setupDefaultBindings();
}

void InputHandler::setupDefaultBindings() {
    std::cout << "üéÆ InputHandler: Setting up default bindings..." << std::endl;
}

void InputHandler::update() {
    for (auto& [key, state] : keyStates_) {
        state.wasPressed = state.isPressed;
    }
}

void InputHandler::handleEvent(const sf::Event& event) {
    // SFML 3.0.2 —Å–∏–Ω—Ç–∞–∫—Å–∏—Å - –∏—Å–ø–æ–ª—å–∑—É–µ–º is<T>() –∏ getIf<T>()
    if (event.is<sf::Event::KeyPressed>() || event.is<sf::Event::KeyReleased>()) {
        // –ü–æ–ª—É—á–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —Å–æ–±—ã—Ç–∏–µ –∫–ª–∞–≤–∏—à–∏
        const sf::Event::KeyPressed* keyPressedEvent = event.getIf<sf::Event::KeyPressed>();
        const sf::Event::KeyReleased* keyReleasedEvent = event.getIf<sf::Event::KeyReleased>();
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∞—è –∫–ª–∞–≤–∏—à–∞ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        sf::Keyboard::Scancode key;
        bool isPressed;
        
        if (keyPressedEvent) {
            key = keyPressedEvent->scancode;
            isPressed = true;
        } else if (keyReleasedEvent) {
            key = keyReleasedEvent->scancode;
            isPressed = false;
        } else {
            return; // –ù–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∞–≤–∏—à–∏
        keyStates_[key].isPressed = isPressed;
        
        // –ï—Å–ª–∏ –∫–ª–∞–≤–∏—à–∞ —Ç–æ–ª—å–∫–æ —á—Ç–æ –Ω–∞–∂–∞—Ç–∞ - –≤—ã–∑—ã–≤–∞–µ–º callback'–∏
        if (isPressed && actionCallbacks_.count(key)) {
            for (const auto& callback : actionCallbacks_.at(key)) {
                callback();
            }
        }
        
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –ø–æ–∑–∂–µ)
        if (isPressed) {
            std::cout << "üéÆ Key pressed: " << static_cast<int>(key) << std::endl;
        }
    }
}

void InputHandler::bindAction(sf::Keyboard::Scancode key, std::function<void()> pressedCallback) {
    actionCallbacks_[key].push_back(pressedCallback);
    std::cout << "üéÆ Bound action to key: " << static_cast<int>(key) << std::endl;
}

bool InputHandler::isKeyPressed(sf::Keyboard::Scancode key) const {
    auto it = keyStates_.find(key);
    return it != keyStates_.end() && it->second.isPressed;
}

bool InputHandler::isKeyJustPressed(sf::Keyboard::Scancode key) const {
    auto it = keyStates_.find(key);
    return it != keyStates_.end() && it->second.isPressed && !it->second.wasPressed;
}

sf::Vector2f InputHandler::getMovementVector() const {
    sf::Vector2f movement(0.f, 0.f);
    
    using Scancode = sf::Keyboard::Scancode;
    
    // –î–≤–∏–∂–µ–Ω–∏–µ –≤–ª–µ–≤–æ (A –∏–ª–∏ —Å—Ç—Ä–µ–ª–∫–∞ –≤–ª–µ–≤–æ)
    if (isKeyPressed(Scancode::A) || isKeyPressed(Scancode::Left)) {
        movement.x -= 1.f;
    }
    
    // –î–≤–∏–∂–µ–Ω–∏–µ –≤–ø—Ä–∞–≤–æ (D –∏–ª–∏ —Å—Ç—Ä–µ–ª–∫–∞ –≤–ø—Ä–∞–≤–æ)
    if (isKeyPressed(Scancode::D) || isKeyPressed(Scancode::Right)) {
        movement.x += 1.f;
    }
    
    // –î–≤–∏–∂–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö (W –∏–ª–∏ —Å—Ç—Ä–µ–ª–∫–∞ –≤–≤–µ—Ä—Ö)
    if (isKeyPressed(Scancode::W) || isKeyPressed(Scancode::Up)) {
        movement.y -= 1.f;
    }
    
    // –î–≤–∏–∂–µ–Ω–∏–µ –≤–Ω–∏–∑ (S –∏–ª–∏ —Å—Ç—Ä–µ–ª–∫–∞ –≤–Ω–∏–∑)
    if (isKeyPressed(Scancode::S) || isKeyPressed(Scancode::Down)) {
        movement.y += 1.f;
    }
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ–∫—Ç–æ—Ä –¥–ª—è –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è
    if (movement.x != 0.f || movement.y != 0.f) {
        float length = std::sqrt(movement.x * movement.x + movement.y * movement.y);
        movement.x /= length;
        movement.y /= length;
    }
    
    return movement;
}