#include "Menu.h"
#include <iostream>

Menu::Menu() : fontLoaded(false) {
    // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —à—Ä–∏—Ñ—Ç
    if (!font.openFromFile("assets/fonts/arial.ttf")) { // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: openFromFile
        std::cout << "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —à—Ä–∏—Ñ—Ç –∏–∑ assets/fonts/arial.ttf" << std::endl;
        // –ü–æ–ø—Ä–æ–±—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø—É—Ç–∏
        #ifdef __APPLE__
        if (!font.openFromFile("/System/Library/Fonts/Arial.ttf")) { // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: openFromFile
            std::cout << "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç Arial" << std::endl;
        } else {
            fontLoaded = true;
            std::cout << "‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —Å–∏—Å—Ç–µ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç Arial" << std::endl;
        }
        #else
        std::cout << "‚ö†Ô∏è  –®—Ä–∏—Ñ—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å" << std::endl;
        #endif
    } else {
        fontLoaded = true;
        std::cout << "‚úÖ –®—Ä–∏—Ñ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ!" << std::endl;
    }
    
    setupMainMenu();
}

bool Menu::loadFont(const std::string& fontPath) {
    if (font.openFromFile(fontPath)) { // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: openFromFile
        fontLoaded = true;
        std::cout << "‚úÖ –®—Ä–∏—Ñ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω: " << fontPath << std::endl;
        return true;
    }
    return false;
}

void Menu::createText(sf::Text& text, const std::string& content, unsigned int size, const sf::Vector2f& position) const { // –î–æ–±–∞–≤–ª—è–µ–º const
    if (fontLoaded) {
        text.setFont(font);
    }
    text.setString(content);
    text.setCharacterSize(size);
    text.setFillColor(sf::Color::White);
    text.setPosition(position);
}

void Menu::update(float deltaTime) {
    // –ê–Ω–∏–º–∞—Ü–∏—è –∏–ª–∏ –¥—Ä—É–≥–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é
}

void Menu::draw(sf::RenderWindow& window) const {
    // –†–∏—Å—É–µ–º —Ñ–æ–Ω –º–µ–Ω—é
    sf::RectangleShape background(sf::Vector2f(1200, 800));
    background.setFillColor(sf::Color(30, 30, 60, 220));
    window.draw(background);
    
    // –†–∏—Å—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    if (fontLoaded) {
        // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å —à—Ä–∏—Ñ—Ç–æ–º
        sf::Text titleText(font, title, 72); // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å —à—Ä–∏—Ñ—Ç–æ–º
        titleText.setFillColor(sf::Color::White);
        
        // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        sf::FloatRect titleBounds = titleText.getLocalBounds();
        titleText.setPosition(sf::Vector2f(600 - titleBounds.size.x / 2, 100));
        window.draw(titleText);
    } else {
        // –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç - –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ —Å –Ω–∞–¥–ø–∏—Å—å—é
        sf::RectangleShape titleBg(sf::Vector2f(600, 80));
        titleBg.setPosition(sf::Vector2f(300, 90));
        titleBg.setFillColor(sf::Color(100, 100, 200, 200));
        titleBg.setOutlineColor(sf::Color::White);
        titleBg.setOutlineThickness(3);
        window.draw(titleBg);
    }
    
    // –†–∏—Å—É–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º
    for (const auto& button : buttons) {
        // –§–æ–Ω –∫–Ω–æ–ø–∫–∏
        window.draw(button.shape);
        
        // –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        if (fontLoaded) {
            // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å const)
            sf::Text buttonText = button.text;
            
            // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤ –∫–Ω–æ–ø–∫–µ
            sf::FloatRect textBounds = buttonText.getLocalBounds();
            sf::Vector2f buttonCenter = sf::Vector2f(
                button.shape.getPosition().x + button.shape.getSize().x / 2,
                button.shape.getPosition().y + button.shape.getSize().y / 2
            );
            
            buttonText.setPosition(sf::Vector2f(
                buttonCenter.x - textBounds.size.x / 2,
                buttonCenter.y - textBounds.size.y / 2 - 5 // –ù–µ–±–æ–ª—å—à–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
            ));
            
            window.draw(buttonText);
        } else {
            // –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç - —Ü–≤–µ—Ç–Ω—ã–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏
            sf::RectangleShape textBg(sf::Vector2f(
                button.shape.getSize().x - 10, 
                button.shape.getSize().y - 10
            ));
            textBg.setPosition(sf::Vector2f(
                button.shape.getPosition().x + 5,
                button.shape.getPosition().y + 5
            ));
            textBg.setFillColor(button.isHovered ? sf::Color(150, 150, 255) : sf::Color(200, 200, 255));
            window.draw(textBg);
        }
    }
    
    // –ü–æ–¥—Å–∫–∞–∑–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –µ—Å–ª–∏ —à—Ä–∏—Ñ—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
    if (!fontLoaded) {
        sf::RectangleShape hintBg(sf::Vector2f(400, 120));
        hintBg.setPosition(sf::Vector2f(400, 600));
        hintBg.setFillColor(sf::Color(50, 50, 100, 180));
        hintBg.setOutlineColor(sf::Color::Yellow);
        hintBg.setOutlineThickness(2);
        window.draw(hintBg);
        
        std::cout << "üéÆ –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º—ã—à—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–æ–∫" << std::endl;
    }
}

void Menu::handleEvent(const sf::Event& event, sf::RenderWindow& window) {
    if (event.is<sf::Event::MouseMoved>()) {
        sf::Vector2f mousePos = static_cast<sf::Vector2f>(sf::Mouse::getPosition(window));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏
        for (auto& button : buttons) {
            bool wasHovered = button.isHovered;
            button.isHovered = button.shape.getGlobalBounds().contains(mousePos);
            
            // –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
            if (button.isHovered && !wasHovered) {
                button.shape.setFillColor(sf::Color(100, 100, 200));
                if (!fontLoaded) {
                    std::cout << "üéØ –ù–∞–≤–µ–¥–µ–Ω–æ –Ω–∞: " << button.label << std::endl;
                }
            } else if (!button.isHovered && wasHovered) {
                button.shape.setFillColor(sf::Color(70, 70, 150));
            }
        }
    }
    
    if (event.is<sf::Event::MouseButtonPressed>()) {
        const auto* mouseEvent = event.getIf<sf::Event::MouseButtonPressed>();
        if (mouseEvent && mouseEvent->button == sf::Mouse::Button::Left) {
            sf::Vector2f mousePos = static_cast<sf::Vector2f>(sf::Mouse::getPosition(window));
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–∞–º
            for (auto& button : buttons) {
                if (button.shape.getGlobalBounds().contains(mousePos)) {
                    std::cout << "üéÆ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: " << button.label << std::endl;
                    if (button.action) {
                        button.action();
                    }
                }
            }
        }
    }
}

void Menu::addButton(const std::string& text, std::function<void()> action, const sf::Vector2f& position) {
    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —á–µ—Ä–µ–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
    Button button(font, text); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º—ã –∫–Ω–æ–ø–∫–∏
    button.shape.setSize(sf::Vector2f(300, 60));
    button.shape.setPosition(position);
    button.shape.setFillColor(sf::Color(70, 70, 150));
    button.shape.setOutlineColor(sf::Color::White);
    button.shape.setOutlineThickness(2);
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
    if (fontLoaded) {
        button.text.setFillColor(sf::Color::White);
        button.text.setPosition(position); // –ë–∞–∑–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è
        button.text.setCharacterSize(28);
    }
    
    button.action = action;
    button.isHovered = false;
    button.label = text;
    
    buttons.push_back(button);
    
    std::cout << "üìù –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞: " << text << std::endl;
}

void Menu::clearButtons() {
    buttons.clear();
}

void Menu::setTitle(const std::string& title) {
    this->title = title;
    std::cout << "üè∑Ô∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫: " << title << std::endl;
}

void Menu::setupMainMenu() {
    // –ë–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
}