#include "Menu.h"
#include <iostream>

Menu::Menu() {
    // –ü—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ —à—Ä–∏—Ñ—Ç–∞ - –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ñ–∏–≥—É—Ä—ã
    setupMainMenu();
}

void Menu::update(float deltaTime) {
    // –ê–Ω–∏–º–∞—Ü–∏—è –∏–ª–∏ –¥—Ä—É–≥–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é
}

void Menu::draw(sf::RenderWindow& window) const {
    // –†–∏—Å—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞–∫ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ —Å —Ç–µ–∫—Å—Ç–æ–º (–ø–æ–∫–∞ –±–µ–∑ —à—Ä–∏—Ñ—Ç–∞)
    sf::RectangleShape titleBackground(sf::Vector2f(400, 60));
    titleBackground.setPosition(sf::Vector2f(300, 80)); // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç Vector2f
    titleBackground.setFillColor(sf::Color(100, 100, 200));
    titleBackground.setOutlineColor(sf::Color::White);
    titleBackground.setOutlineThickness(2);
    window.draw(titleBackground);
    
    // –†–∏—Å—É–µ–º –∫–Ω–æ–ø–∫–∏
    for (const auto& button : buttons) {
        window.draw(button.shape);
        
        // –í—Ä–µ–º–µ–Ω–Ω–æ —Ä–∏—Å—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–ø—Ä–∞–π—Ç—ã)
        sf::RectangleShape textBg(sf::Vector2f(button.shape.getSize().x - 20, button.shape.getSize().y - 20));
        textBg.setPosition(sf::Vector2f( // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç Vector2f
            button.shape.getPosition().x + 10, 
            button.shape.getPosition().y + 10
        ));
        textBg.setFillColor(sf::Color(200, 200, 200));
        window.draw(textBg);
    }
}

void Menu::handleEvent(const sf::Event& event, sf::RenderWindow& window) {
    if (event.is<sf::Event::MouseMoved>()) {
        sf::Vector2f mousePos = static_cast<sf::Vector2f>(sf::Mouse::getPosition(window));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏
        for (auto& button : buttons) {
            bool wasHovered = button.isHovered;
            button.isHovered = button.shape.getGlobalBounds().contains(mousePos);
            
            // –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
            if (button.isHovered && !wasHovered) {
                button.shape.setFillColor(sf::Color(100, 100, 200));
            } else if (!button.isHovered && wasHovered) {
                button.shape.setFillColor(sf::Color(70, 70, 150));
            }
        }
    }
    
    if (event.is<sf::Event::MouseButtonPressed>()) {
        const auto* mouseEvent = event.getIf<sf::Event::MouseButtonPressed>();
        if (mouseEvent && mouseEvent->button == sf::Mouse::Button::Left) {
            sf::Vector2f mousePos = static_cast<sf::Vector2f>(sf::Mouse::getPosition(window));
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–∞–º
            for (auto& button : buttons) {
                if (button.shape.getGlobalBounds().contains(mousePos)) {
                    std::cout << "üéÆ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞!" << std::endl;
                    if (button.action) {
                        button.action();
                    }
                }
            }
        }
    }
}

void Menu::addButton(const std::string& text, std::function<void()> action, const sf::Vector2f& position) {
    Button button;
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º—ã –∫–Ω–æ–ø–∫–∏
    button.shape.setSize(sf::Vector2f(200, 50));
    button.shape.setPosition(position); // –£–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç - –æ–¥–∏–Ω Vector2f
    button.shape.setFillColor(sf::Color(70, 70, 150));
    button.shape.setOutlineColor(sf::Color::White);
    button.shape.setOutlineThickness(2);
    
    button.action = action;
    button.isHovered = false;
    
    buttons.push_back(button);
    
    std::cout << "üìù –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞: " << text << " –≤ –ø–æ–∑–∏—Ü–∏–∏ (" 
              << position.x << ", " << position.y << ")" << std::endl;
}

void Menu::clearButtons() {
    buttons.clear();
}

void Menu::setTitle(const std::string& title) {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    std::cout << "üè∑Ô∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫: " << title << std::endl;
}

void Menu::setupMainMenu() {
    // –ë–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
}